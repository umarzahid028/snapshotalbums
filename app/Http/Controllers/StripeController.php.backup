<?php
    
namespace App\Http\Controllers;

use App\Models\UserPayment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Session;
use Stripe\Stripe;
use Stripe\Checkout\Session as StripeSession;
use Carbon\Carbon;
use Config;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;



class StripeController extends Controller
{
        /**
         * success response method.
         *
         * @return \Illuminate\Http\Response
         */
       
        public function stripe()
        {
             $user = Auth::user();
     
             // Check if the authenticated user has any payment records
             if ($user->userPayments()->exists()) {
                 return redirect()->back()->with('success', 'You already have a payment record.');
             }
     
             return view('admin.album.stripe.stripe');
        }
    
        /**
         * success response method.
         *
         * @return \Illuminate\Http\Response
         */
        public function stripePost(Request $request)
        {
            // dd($request->all());
            try {
                Stripe\Stripe::setApiKey(env('STRIPE_SECRET'));
    
                // Set your secret key. Remember to switch to your live secret key in production.
                // See your keys here: https://dashboard.stripe.com/apikeys
                $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));
                // $count= $stripe->customers->all(['limit' => 1]);
    
    
                
                $user = auth()->user();
    
                $customer = $stripe->customers->create([
                    'name' => $user->name,
                    'email' => $user->email,
                    'source' => $request->stripeToken,
                ]);
    
                $user->stripe_customer_id = $customer->id;
                $user->renew_status = "1"; // Assign the status value
                $user->save();
    
    
                $charge = Stripe\Charge::create([
                    "amount" => 99 * 100,
                    "currency" => "usd",
                    "customer" => $customer->id,
                    "description" => "Premium Package."
                ]);
    
                  // Find the UserPayment record for the user
                  $userPayment = UserPayment::where('user_id', $user->id)->first();
    
                  if ($userPayment) {
                      // Update the existing record
                      $userPayment->name = $user->name;
                      $userPayment->payment_id = $charge->id;
                      $userPayment->save();
                  } else {
                      // Create a new record if none exists
                      UserPayment::create([
                          'user_id' => $user->id,
                          'name' => $user->name,
                          'payment_id' => $charge->id,
                      ]);
                  }
        
                Session::flash('success', 'Payment successful!');
            } catch (Stripe\Exception\CardException $e) {
                // Handle card errors and set an error message in the session
                Session::flash('error', $e->getMessage());
            } catch (Exception $e) {
                // Handle other errors and set an error message in the session
                Session::flash('error', 'An error occurred during payment processing.');
            }
        
            return redirect('/dashboard'); // Redirect to dashboard on error
        }
        
    
      /*  public function store(Request $request)
        {
        
            // Insert data into the "contact" table using the DB facade
            DB::table('contact')->insert([
                'first_name' => $request['first_name'],
                'last_name' => $request['last_name'],
                'email' => $request['email'],
                'message' => $request['message'],
            ]);
        
            // Redirect back to the form with a success message
            return redirect()->back()->with('success', 'Contact form submitted successfully!');
        }
        */
        public function store(Request $request)
        {
            // Insert data into the "contact" table using the DB facade
            DB::table('contact')->insert([
                'first_name' => $request['first_name'],
                'last_name' => $request['last_name'],
                'email' => $request['email'],
                'message' => $request['message'],
            ]);
    
            // Send an email with the form data
            $formData = [
                'first_name' => $request['first_name'],
                'last_name' => $request['last_name'],
                'email' => $request['email'],
                'message' => $request['message'],
            ];
    
            Mail::send([], [], function ($message) use ($formData) {
                $message->to('snapshotalbums2023@gmail.com')
                        ->subject('New Contact Form Submission')
                        ->setBody(
                            'First Name: ' . $formData['first_name'] . '<br>' .
                            'Last Name: ' . $formData['last_name'] . '<br>' .
                            'Email: ' . $formData['email'] . '<br>' .
                            'Message: ' . $formData['message'],
                            'text/html'
                        );
            });
    
            // Redirect back to the form with a success message
            return redirect()->back()->with('success', 'Contact form submitted successfully!');
        }
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public function subscribeToPlan(Request $request)
    {
        \Stripe\Stripe::setApiKey(env('STRIPE_SECRET')); // use test key
    
        $user = auth()->user();
    
        $planId = $request->input('plan'); // Stripe Price ID from form
        $planName = $planId === 'price_1Rm3R8FKEeOI19uNujgmXKNg' ? 'free' : 'premium'; // map plan IDs
    
        $checkoutStripeSession = \Stripe\Checkout\Session::create([
            'payment_method_types' => ['card'],
            'mode' => 'subscription',
            'line_items' => [[
                'price' => $planId,
                'quantity' => 1,
            ]],
            'customer_email' => $user->email,
            'client_reference_id' => $user->id,
            'subscription_data' => [
                'trial_period_days' => 7,
            ],
            'success_url' => route('dashboard') . '?subscribed=1',
            'cancel_url' => route('subscribe.form'),
        ]);
    
        // Estimate the trial end date as 7 days from now
        $trialEndsAt = now()->addDays(7);
    
        // Save info in DB
        $user->plan = $planName;
        $user->subscription_active = true;
        $user->trial_ends_at = $trialEndsAt;
        $user->save();
    
        return redirect($checkoutStripeSession->url);
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    







}
